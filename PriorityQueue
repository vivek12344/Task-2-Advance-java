//VIDEO NO.5

//PriorityQueue-- PriorityQueue is also class that is defined 
//in the collection framework that gives us a way for processing 
//the objects on the basis of priority.

// PriorityQueue Class Declaration
  public class PriorityQueue<E> extends AbstractQueue<E> implements Serializable 


//Java PriorityQueue Example--

 import java.util.*;  
 class TestCollection
 {  
   public static void main(String args[])
   {  
   PriorityQueue<String> queue=new PriorityQueue<String>();  
   queue.add("Amit");  
   queue.add("Vijay");  
   queue.add("Karan");  
   queue.add("Jai");  
   queue.add("Rahul");  
   System.out.println("head:"+queue.element());  
   System.out.println("head:"+queue.peek());  
   System.out.println("iterating the queue elements:");  
   Iterator itr=queue.iterator();  
   while(itr.hasNext())
   {  
     System.out.println(itr.next());  
   }  
   queue.remove();  
   queue.poll();  
   System.out.println("after removing two elements:");  
   Iterator<String> itr2=queue.iterator();  

   while(itr2.hasNext()){  
    System.out.println(itr2.next());  
    }  
  }  
} 



//output=>

/***head:Amit
      iterating the queue elements:
      Amit
      Jai
      Karan
      Vijay
      Rahul
       after removing two elements:
       Karan
       Rahul
       Vijay ****/


//another example-

import java.util.*;
  
class PriorityQueueDemo {
    
      // Main Method
    public static void main(String args[])
    {
        // Creating empty priority queue
        PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>();
  
        // Adding items to the pQueue using add()
        pQueue.add(10);
        pQueue.add(20);
        pQueue.add(15);
  
        // Printing the top element of PriorityQueue
        System.out.println(pQueue.peek());
  
        // Printing the top element and removing it
        // from the PriorityQueue container
        System.out.println(pQueue.poll());
  
        // Printing the top element again
        System.out.println(pQueue.peek());
    }
}

//Output
// 10
// 10
// 15
