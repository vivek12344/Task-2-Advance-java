//video no. 8,9 and 10

//A Tree is a non-linear data structure where data objects are 
//generally organized in terms of hierarchical relationship.


//In Java, we can represent a tree node using class. Below is 
//an example of a tree node with integer data.

static class Node {    
    int value; 
        Node left, right; 
          
        Node(int value){ 
            this.value = value; 
            left = null; 
            right = null; 
        }



//Binary Tree Implementation

package MyPackage;
  
public class Tree { 
    static class Node {    
    int value; 
        Node left, right; 
          
        Node(int value){ 
            this.value = value; 
            left = null; 
            right = null; 
        } 
    } 
       
    public void insert(Node node, int value) {
        if (value < node.value) { if (node.left != null) { insert(node.left, value); } else { System.out.println(" Inserted " + value + " to left of " + node.value); node.left = new Node(value); } } else if (value > node.value) {
          if (node.right != null) {
            insert(node.right, value);
          } else {
            System.out.println("  Inserted " + value + " to right of "
                + node.value);
            node.right = new Node(value);
          }
        }
      }
     public void traverseInOrder(Node node) {
        if (node != null) {
            traverseInOrder(node.left);
            System.out.print(" " + node.value);
            traverseInOrder(node.right);
        }
     }
public static void main(String args[]) 
    { 
    Tree tree = new Tree();
                Node root = new Node(5);
                System.out.println("Binary Tree Example");
                System.out.println("Building tree with root value " + root.value);
                tree.insert(root, 2);
                tree.insert(root, 4);
                tree.insert(root, 8);
                tree.insert(root, 6);
                tree.insert(root, 7);
                tree.insert(root, 3);
                tree.insert(root, 9);
                System.out.println("Traversing tree in order");
                tree.traverseLevelOrder();
                
              }
}




/**** Output:

Binary Tree Example
Building tree with root value 5
  Inserted 2 to left of 5
  Inserted 4 to right of 2
  Inserted 8 to right of 5
  Inserted 6 to left of 8
  Inserted 7 to right of 6
  Inserted 3 to left of 4
  Inserted 9 to right of 8
Traversing tree in order
 2 3 4 5 6 7 8 9
***/



package MyTree;

import MyTree.BinaryTreeTest.Tree.Node;

public class BinaryTreeTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Tree tree = new Tree();
		
		Node root = new Tree.Node(5);
		
		tree.inster(root, 2);
		tree.inster(root, 4);
		tree.inster(root, 6);
		tree.inster(root, 7);
		tree.inster(root, 9);
		tree.inster(root, 1);
		
		System.out.println("Traverse the tree");
		tree.inorder(root);
		
		System.out.println("PreOrder");
		tree.preOrder(root);
		
		System.out.println("PostOrder");
		tree.postOrder(root);

	}
	
	public static class Tree{
		
		class Node{
			int value;
			Node left, right;
			
			Node(int value){
				this.value = value;
				left = null;
				right = null;
				
				
			}
		}
		
		public void insert(Node nod, int value) {
			
			if(value <= node.value) {
				if(node.left != null) {
					insert(node.left, value);
				}else {
					System.out.println("insert" + value + "to the left of" + node.value);
					node.left = new Node(value);
				}
			} else if(value <= node.value) {
				if(node.left != null) {
					insert(node.left, value);
				}else {
					
					node.right = new Node(value);
					System.out.println("inserted" + value + "to the right of" + node.value);
				}
		}
	}
		
		public void inorder(Node node) {
			
			if(node != null) {
				inorder(node.left);
				System.out.println(" " + node.value);
				inorder(node.right);
			}
		}
		
		public void preOrder(Node node) {
			if(node != null) {
				System.out.println(" " + node.value);
				preOrder(node.left);
				preOrder(node.right);
			}
		}
		
		public void postOrder(Node node) {
			if(node != null) {
				
				postOrder(node.left);
				postOrder(node.right);
				System.out.println(" " + node.value);
			}
				
			}
		}
}
